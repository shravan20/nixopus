name: Test Nixopus API

on:
  push:
    paths:
      - 'api/**'
  pull_request:
    paths:
      - 'api/**'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      test-db:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: nixopus
          POSTGRES_PASSWORD: nixopus
          POSTGRES_DB: nixopus_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
          cache: true
          cache-dependency-path: api/go.sum
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Start Docker daemon
        run: |
          sudo systemctl start docker
          sudo usermod -aG docker $USER
          # Wait for Docker to be ready
          for i in {1..10}; do
            if docker info > /dev/null 2>&1; then
              echo "Docker is ready"
              break
            fi
            echo "Waiting for Docker... $i"
            sleep 2
          done
      
      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5433 -U nixopus -d nixopus_test; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL... $i"
            sleep 2
          done
          echo "PostgreSQL failed to start"
          exit 1
      
      - name: Install Redis
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server
      
      - name: Run unit tests
        env:
          HOST_NAME: localhost
          DB_PORT: 5433
          USERNAME: nixopus
          PASSWORD: nixopus
          DB_NAME: nixopus_test
        run: |
          cd api && make test
      
      - name: Build API server
        env:
          HOST_NAME: localhost
          DB_PORT: 5433
          USERNAME: nixopus
          PASSWORD: nixopus
          DB_NAME: nixopus_test
          PORT: 8080
          SSL_MODE: disable
          REDIS_URL: redis://localhost:6379
        run: |
          cd api && go build -o bin/nixopus-api .
      
      - name: Start API server
        env:
          HOST_NAME: localhost
          DB_PORT: 5433
          USERNAME: nixopus
          PASSWORD: nixopus
          DB_NAME: nixopus_test
          PORT: 8080
          SSL_MODE: disable
          REDIS_URL: redis://localhost:6379
        run: |
          cd api && ./bin/nixopus-api > server.log 2>&1 &
          echo $! > api_server.pid
          sleep 2
          echo "Server logs:"
          cat server.log || echo "No logs yet"
      
      - name: Wait for API server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8080/api/v1/health > /dev/null; then
              echo "API server is ready"
              exit 0
            fi
            echo "Waiting for API server... $i"
            if [ $i -eq 10 ] || [ $i -eq 20 ]; then
              echo "Server logs at attempt $i:"
              cat api/server.log || echo "No logs available"
            fi
            sleep 2
          done
          echo "API server failed to start"
          echo "Final server logs:"
          cat api/server.log || echo "No logs available"
          exit 1
      
      - name: Run integration tests
        env:
          HOST_NAME: localhost
          DB_PORT: 5433
          USERNAME: nixopus
          PASSWORD: nixopus
          DB_NAME: nixopus_test
          API_BASE_URL: http://localhost:8080
          REDIS_URL: redis://localhost:6379
        run: |
          cd api && make test-integration
      
      - name: Stop API server
        if: always()
        run: |
          if [ -f api/api_server.pid ]; then
            kill $(cat api/api_server.pid) || true
            rm api/api_server.pid
          fi 